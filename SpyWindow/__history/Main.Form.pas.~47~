unit Main.Form;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.ExtCtrls, Vcl.Menus,

  System.Threading, StrUtils, Vcl.StdCtrls ;

type
  TMain_Form = class(TForm)
    TrayIcon: TTrayIcon;
    PopupMenu: TPopupMenu;
    Exit1: TMenuItem;
    N1: TMenuItem;
    Memo1: TMemo;
  private
    { Private declarations }
    Procedure DoStart;
  public
    { Public declarations }
  end;

var
  Main_Form: TMain_Form;
  canceled: Boolean;

implementation

{$R *.dfm}


function WindowClose(ATitle: String): Boolean;
var
  Handle: THandle;
begin
  result := false;
  Handle := FindWindow(nil, PChar(ATitle));

  if Handle > 0 then
  begin
    ShowMessage('Achou');
    SendMessage(Handle, WM_CLOSE, 0, 0);
    result := true;
  end;

end;

function GetWindow: string;
var
  Handle: THandle;
  Len: LongInt;
  Title: string;
begin
  Result := '';
  Handle := GetForegroundWindow;

  if Handle <> 0 then
  begin
    Len := GetWindowTextLength(Handle) + 1;
    SetLength(Title, Len);
    GetWindowText(Handle, PChar(Title), Len);
    Result := TrimRight(Title);
  end;
end;

function ContainsString(AValue: string): Boolean;
Const
  Title : Array[0..2] of String = ('youtube', 'focebook', 'instagram');
begin
  if MatchStr(LowerCase(AValue), Title) then
    result := true
  else
    result := false;
end;

{ TMain_Form }

procedure TMain_Form.DoStart;
var
  Task: ITask;
  window: String;
begin
    canceled := false;

    Task := TTask.Run(
      procedure
      begin

        while not canceled do
        begin
          if canceled then
            Exit;

          sleep(1000);
          TThread.Queue(nil,
             procedure
             begin
               window := GetWindow;

               if not window.IsEmpty then
               begin
                 Memo1.Lines.Add(window);
               end;
             end
          );
        end;

      end
    );
end;

end.
